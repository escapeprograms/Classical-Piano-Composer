""" This module generates notes for a midi file using the
    trained neural network """

from models import MusicLSTM

import pickle
import numpy as np
from music21 import instrument, note, stream, chord

import torch
import torch.nn as nn
import torch.nn.functional as F

from preprocessing import prepare_sequences


def generate():
    """ Generate a piano midi file """
    #load the notes used to train the model
    with open('data/notes', 'rb') as filepath:
        notes, durations = pickle.load(filepath)

    # Get all pitch names
    pitch_names = sorted(set(item for item in notes))
    note_lengths = sorted(set(item for item in durations))

    # Get all pitch names
    n_vocab = len(set(notes))
    d_vocab = len(set(durations))

    network_input, _ = prepare_sequences(notes, durations, n_vocab, d_vocab)

    model = torch.load("models/music_model.pt")
    model.eval()

    prediction_output = generate_notes(model, network_input, pitch_names, note_lengths, n_vocab, d_vocab)
    create_midi(prediction_output)


# def prepare_sequences(notes, pitchnames, n_vocab):
#     """ Prepare the sequences used by the Neural Network """
#     # map between notes and integers and back
#     note_to_int = dict((note, number) for number, note in enumerate(pitchnames))

#     sequence_length = 100
#     network_input = []
#     output = []
#     for i in range(0, len(notes) - sequence_length, 1):
#         sequence_in = notes[i:i + sequence_length]
#         sequence_out = notes[i + sequence_length]
#         network_input.append([note_to_int[char] for char in sequence_in])
#         output.append(note_to_int[sequence_out])

#     n_patterns = len(network_input)

#     # reshape the input into a format compatible with LSTM layers
#     normalized_input = np.reshape(network_input, (n_patterns, sequence_length, 1))
#     # normalize input
#     normalized_input = normalized_input / float(n_vocab)

#     return (network_input, normalized_input)


def generate_notes(model, network_input, pitch_names, note_lengths, n_vocab, d_vocab):
    """ Generate notes from the neural network based on a sequence of notes """
    # pick a random sequence from the input as a starting point for the prediction
    start = np.random.randint(0, len(network_input)-1)

    int_to_note = dict((number, note) for number, note in enumerate(pitch_names))
    int_to_duration = dict((number, length) for number, length in enumerate(note_lengths))

    pattern = network_input[start]
    prediction_output = []
    # generate 500 notes
    for note_index in range(500):
        prediction_input = np.reshape(np.array(pattern, dtype=np.float32), (1, 2, pattern.shape[1], 1))
        prediction = model(torch.tensor(prediction_input))

        note_index = torch.argmax(prediction[0, 0:n_vocab]).item()
        note = int_to_note[note_index]
        
        duration_index = torch.argmax(prediction[0, n_vocab+1:]).item()
        duration = int_to_duration[duration_index]
        prediction_output.append((note, duration)) #todo: note length


        pattern = np.append(pattern, np.reshape(np.array([note_index, duration_index]), (2, 1, 1)), axis=1)
        pattern = pattern[:, 1:, :]

    return prediction_output

def create_midi(prediction_output):
    """ convert the output from the prediction to notes and create a midi file
        from the notes """
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for pattern, length in prediction_output:
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                new_note.quarterLength = length
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            new_note.quarterLength = length
            output_notes.append(new_note)

        # increase offset each iteration so that notes do not stack
        offset += length

    midi_stream = stream.Stream(output_notes)

    midi_stream.write('midi', fp='test_output.mid')



generate()
